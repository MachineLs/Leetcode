//此题和岛屿问题类似, 在dfs的时候返回岛屿面积, 注意现在是return 0, 最后return 4个方向的dfs + 1, 这样每消除一个1, 返回值+1 
//ref https://labuladong.github.io/algo/di-san-zha-24031/bao-li-sou-96f79/yi-wen-mia-4f482/
class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int res = 0;
        int m = grid.length, n = grid[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    res = Math.max(res, dfs(grid, i, j));
                }
            }
        }
        return res;
    }
    int dfs (int[][] grid, int i, int j) {
        int m = grid.length, n = grid[0].length;
        /* 我错在没先判断边界, 先查是否=0了*/
        if (i < 0 || j < 0 || i >= m || j >= n) return 0;
        //应该放在边界判断下面
        if (grid[i][j] == 0) return 0;
        grid[i][j] = 0;
        return dfs(grid, i + 1, j) + dfs(grid, i - 1, j) + dfs(grid, i, j + 1) + dfs(grid, i, j - 1) + 1;
    }
}
