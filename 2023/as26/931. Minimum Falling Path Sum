//这题就是从上往下走, 按照题意下一行的中左右三个数, 最后得到一个最小路径和
//可以用带memo的递归来做 因为查表了 所以为O(m*n) and O(n)
class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        int res = Integer.MAX_VALUE;
        memo = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(memo[i], 66666);
        }
        //从每一列往下走都可能会出现最小值
        for (int j = 0; j < n; j++) {
            res = Math.min(res, dp(matrix, n-1, j));
        }
        return res;
    }
    int[][] memo;
    int dp(int[][] matrix, int i, int j) {
        if (i < 0 || j < 0 ||
            i >= matrix.length ||
            j >= matrix[0].length) {
                return 99999;
            }
        if (i == 0) return matrix[0][j];
        /*我错在忘记查memo了*/ 
        if (memo[i][j] != 66666) return memo[i][j];
        memo[i][j] = matrix[i][j] + min(
            dp(matrix, i-1, j),
            dp(matrix, i-1, j+1),
            dp(matrix, i-1, j-1)
        );
        return memo[i][j];
    }
    int min(int a, int b, int c) {
        return Math.min(a, Math.min(b, c));
    }
}
