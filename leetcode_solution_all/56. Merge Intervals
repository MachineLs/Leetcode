V2023.4.7
Solution1 : O(nlogn) and O(n)
先sort,判断是否重叠 对于非重叠部分直接加, 对于重叠部分,更新每一个interval的右区间的值为当前interval的右区间的值

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        LinkedList<int[]> res = new LinkedList<>();
        for (int i = 0; i < intervals.length; i++) {
            //如果最后res最后一位, 小于intervals[i]第一位, 直接把当前加到res里
            if (res.isEmpty() || res.getLast()[1] < intervals[i][0]) {
                res.add(intervals[i]);
            } else {
                //因为有这种例子, 所以 [[1,4],[2,3]]
                //否则把res最后一位, 更新为intervals最后一位
                res.getLast()[1] = Math.max(res.getLast()[1], intervals[i][1]); 
            }
        }
        return res.stream().toArray(int[][]::new);
        //另一种写法return res.toArray(new int[res.size()][]);
    }
}

