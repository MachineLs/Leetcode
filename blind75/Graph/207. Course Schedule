第二次错,还是不知道该传什么进queue(入度为0的节点,这里直接传int课程数字就可以)

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        // 0 -> 1 ->3   
        //   \ 
        //    2 /
       
        int len = prerequisites.length;
        List<List<Integer>> graph = new ArrayList<>(len);
        //我错在这里没有给graph加上对应course的空的list, 导致graph是null,并没没办法get(1)
        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList());
        }
        
        for (int[] prerequisite : prerequisites) {
            int x = prerequisite[0];
            int y = prerequisite[1];
            graph.get(y).add(x);
        }
        // (1,2) (3) (3) ();
        return helper(graph);
    }
    
    private boolean helper(List<List<Integer>> graph) {
        int numCourse = graph.size();
        int[] incommingEdges = new int[numCourse];
        for (int x = 0; x < numCourse; x++) {
            // incommingEdges[x] = graph.get(x); 错在这里不知道怎么实现入度
            for (int y : graph.get(x)) {
                incommingEdges[y]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        int expand = 0;
        // q.offer(graph); 错在这里想把graph传进去, 拓扑排序需要传的其实是入度为0的节点, 这里传int数进去就好,而不是像bfs需要传node
        for (int x = 0; x < numCourse; x++)
            if (incommingEdges[x] == 0) {
                q.offer(x);
            }
        
        //bfs
        while (!q.isEmpty()) {
            int cur = q.poll();
            expand++;
            for (int nei : graph.get(cur)) {
                if (--incommingEdges[nei] == 0) {
                    q.offer(nei); //传的依然是入度为0的数
                }
            }
        }        
        return numCourse == expand;
    }
        
}


第一次做
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> graph =  new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }
        //我错在用使用i<numCourses会出界, 没有用iterator,或者 i < prerequisites.length 
        for (int i = 0; i < prerequisites.length; i++){    //2 [[1,0]] 这个case inx只能为0, 为1的时候就出界了 所以不可以这样写只能用iterator
            int[] prerequisite = prerequisites[i]; 
            int x = prerequisite[0];
            int y = prerequisite[1];
            graph.get(y).add(x);
        }
        // for (int[] prerequisite : prerequisites) {
        //     int x = prerequisite[0];
        //     int y = prerequisite[1];
        //     graph.get(y).add(x);
        // }
        return helper(graph);
    }

    public boolean helper(List<List<Integer>> graph) {
        int numCourses = graph.size();
        int[] incomingEdges = new int[numCourses];
        int[] topo = new int[numCourses];
        for (int x = 0; x < numCourses; x++) {
            for (int y : graph.get(x)) {
                incomingEdges[y]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        int numExpanded = 0;
        //让所有入度为0的节点进q
        for (int x = 0; x < numCourses; x++) {
            if (incomingEdges[x] == 0) {
                q.offer(x); //我错在q offer进来incomingEdges[x]; 应该offer x
            }
        }
        //bfs模板
        while (!q.isEmpty()) {
            int cur = q.poll();
            numExpanded++;
            for (int nei : graph.get(cur)) { //我错在没有通过get(cur)获得cur的nei
                if (--incomingEdges[nei] == 0) {
                    q.offer(nei);//我错在offer incomingEdges[nei] 而不是直接offer nei
                }
            }

            // System.out.println(numExpanded);
        }
        return numCourses == numExpanded;
    }
}
