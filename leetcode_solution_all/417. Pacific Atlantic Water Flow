DFS and BFS solution both O(mn) and O(mn) m and n is rows and cols of the matrix;

class Solution {
    private int[][] DIRECTIONS = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
    int rows;
    int cols;
    int[][] landHeights;
    public List<List<Integer>> pacificAtlantic(int[][] matrix) {
        if (matrix.length == 0 || matrix[0].length == 0) {
            return new ArrayList<>();
        }
        
        rows = matrix.length;
        cols = matrix[0].length;
        landHeights = matrix;
        boolean[][] pReachable = new boolean[rows][cols];
        boolean[][] aReachable = new boolean[rows][cols];
        for (int i = 0; i < rows; i++) {
            dfs(i, 0, pReachable);
            dfs(i,cols - 1, aReachable);
        }
        
        for (int i = 0; i < cols; i++) {
            dfs(0, i, pReachable);
            dfs(rows -1, i, aReachable);
        }
        
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (pReachable[i][j] && aReachable[i][j]) {
                    res.add(List.of(i,j));
                }
            }
        }
        return res;
    }
    
    private void dfs(int row, int col, boolean[][] reachable) {
        reachable[row][col] = true;
        for (int[] dir : DIRECTIONS) {
            int newRow = row + dir[0];
            int newCol = col + dir[1];
            if (newRow < 0 || newRow >= rows || newCol < 0 || newCol >= cols) {
                continue;
            }
            if (reachable[newRow][newCol]) {
                continue;
            }
            if (landHeights[newRow][newCol] < landHeights[row][col]) {
                continue;
            }
            dfs(newRow, newCol, reachable);
        }
    }
}



Solution1: BFS 使用全局变量向四个方向分别查找
//思路就是用两个queue,分别从太平洋和大西洋合法两个方向遍历图, 直到遍历到最高点(在往后面遍历雨水就流不出了),记录下这个boolean reachable[][]
//细节1; 检查是否小于0或者大于边界, 细节2:检查是否坐标是否被访问过 细节3:检查是不是四个方向新的值是不是升序的, 如果遇到降序说明已经找到最高点,不必往下访问
//使用2个for循环, 找到两个reachable重复的坐标,并且返回即可
class Solution {
    private static final int[][] DIRECTIONS = new int[][]{{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
    private int numRows;
    private int numCols;
    private int[][] landHeights;
    
    public List<List<Integer>> pacificAtlantic(int[][] matrix) {
        // Check if input is empty
        if (matrix.length == 0 || matrix[0].length == 0) {
            return new ArrayList<>();
        }

        // Save initial values to parameters
        numRows = matrix.length;
        numCols = matrix[0].length;
        landHeights = matrix;
        
        // Setup each queue with cells adjacent to their respective ocean
        Queue<int[]> pacificQueue = new LinkedList<>();
        Queue<int[]> atlanticQueue = new LinkedList<>();
        for (int i = 0; i < numRows; i++) {
            pacificQueue.offer(new int[]{i, 0});
            atlanticQueue.offer(new int[]{i, numCols - 1});
        }
        for (int i = 0; i < numCols; i++) {
            pacificQueue.offer(new int[]{0, i});
            atlanticQueue.offer(new int[]{numRows - 1, i});
        }
        
        // Perform a BFS for each ocean to find all cells accessible by each ocean
        boolean[][] pacificReachable = bfs(pacificQueue);
        boolean[][] atlanticReachable = bfs(atlanticQueue);
        
        // Find all cells that can reach both oceans
        List<List<Integer>> commonCells = new ArrayList<>();
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                if (pacificReachable[i][j] && atlanticReachable[i][j]) {
                    commonCells.add(List.of(i, j));
                }
            }
        }
        return commonCells;
    }
    
    private boolean[][] bfs(Queue<int[]> queue) {
        boolean[][] reachable = new boolean[numRows][numCols];
        while (!queue.isEmpty()) {
            int[] cell = queue.poll();
            // This cell is reachable, so mark it
            reachable[cell[0]][cell[1]] = true;
            for (int[] dir : DIRECTIONS) { // Check all 4 directions
                int newRow = cell[0] + dir[0];
                int newCol = cell[1] + dir[1];
                // Check if new cell is within bounds
                if (newRow < 0 || newRow >= numRows || newCol < 0 || newCol >= numCols) {
                    continue;
                }
                // Check that the new cell hasn't already been visited
                if (reachable[newRow][newCol]) {
                    continue;
                }
                // Check that the new cell has a higher or equal height,
                // So that water can flow from the new cell to the old cell
                if (landHeights[newRow][newCol] < landHeights[cell[0]][cell[1]]) {
                    continue;
                }
                // If we've gotten this far, that means the new cell is reachable
                queue.offer(new int[]{newRow, newCol});
            }
        }
        return reachable;
    }
}

//思路就是用两个queue,分别从太平洋和大西洋合法两个方向遍历图, 直到遍历到最高点(在往后面遍历雨水就流不出了),记录下这个boolean reachable[][]
//细节1; 检查是否小于0或者大于边界, 细节2:检查是否坐标是否被访问过 细节3:检查是不是四个方向新的值是不是升序的, 如果遇到降序说明已经找到最高点,不必往下访问
//使用2个for循环, 找到两个reachable重复的坐标,并且返回即可
class Solution {
    private static final int[][] DIRECTIONS = new int[][]{{0,1},{1,0},{-1,0},{0,-1}}; //注意我错在{-1,-1},这个应该是斜着的方向
    private int numRows;
    private int numCols;
    private int[][] landHeights;
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        if (heights.length == 0 || heights[0].length == 0) return new ArrayList<>();
        numRows = heights.length;
        numCols = heights[0].length;
        landHeights = heights;
        Queue<int[]> pacificQueue = new LinkedList<>();
        Queue<int[]> atlanticQueue = new LinkedList<>();
        for (int i = 0; i < numRows; i++) {
            pacificQueue.offer(new int[]{i, 0});//(正左方)
            atlanticQueue.offer(new int[]{i, numCols-1});//正右方)
        }
        for (int i = 0; i < numCols; i++) {
            pacificQueue.offer(new int[]{0, i}); //(正上方)
            atlanticQueue.offer(new int[]{numRows-1, i});//(正下方)
        }
        //计算可以走到的坐标
        boolean[][] pacificReachable = bfs(pacificQueue);
        boolean[][] atlanticReachable = bfs(atlanticQueue);
        //两个 for循环查找重复的节点
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                if (pacificReachable[i][j] && atlanticReachable[i][j]) {
                    res.add(List.of(i, j)); //  Returns an immutable list containing two elements.
                }
            }
        }
        return res;
    }
    private boolean[][] bfs(Queue<int[]> q) {
        boolean[][] reachable = new boolean[numRows][numCols];
        while (!q.isEmpty()) {
            int[] cell = q.poll();
            reachable[cell[0]][cell[1]] = true;
            //分别查上下左右四个方向是不是合法
            for (int[] dir : DIRECTIONS) {
                int newRow = cell[0] + dir[0];
                int newCol = cell[1] + dir[1];
            
                //3个细节:边界,重复,是否增序
                if (newRow < 0 || newRow >= numRows || newCol < 0 || newCol >= numCols) {
                    continue;
                }
                if (reachable[newRow][newCol]) {
                    continue;
                }
                if (landHeights[newRow][newCol] < landHeights[cell[0]][cell[1]]) {
                    continue;
                }
            
                q.offer(new int[]{newRow, newCol});
            }
        }
        return reachable;
    }
}
