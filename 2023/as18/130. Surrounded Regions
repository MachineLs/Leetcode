//ref https://labuladong.github.io/algo/di-yi-zhan-da78c/shou-ba-sh-03a72/bing-cha-j-323f3/
// 主要思路是适时增加虚拟节点，想办法让元素「分门别类」，建立动态连通关系。
//让外层的O全和dummy链接, 把内层被X上下左右包围的O全置换成X;
//二维转1维度数组 -> 二维坐标 (x,y) 可以转换成 x * n + y 这个数（m 是棋盘的行数，n 是棋盘的列数）
class Solution {
    public void solve(char[][] board) {
        if (board.length == 0) return;
        int m = board.length, n = board[0].length;
        //给dummy留个位子
        UF uf = new UF(m*n + 1);
        int dummy = m*n;
        //将首列和末列的0与dummy连通
        for (int i = 0; i < m; i++) {
            if (board[i][0] == 'O') uf.union(i*n, dummy);
            //二维坐标 (x,y) 可以转换成 x * n + y 这个数（m 是棋盘的行数，n 是棋盘的列数）
            if (board[i][n-1] == 'O') uf.union(i*n + n-1, dummy); //计算具体位子, 二维->一维 
        }
        //将首行和末行的0与dummy连通
        for (int j = 0; j < n; j++) {
            if (board[0][j] == 'O') uf.union(j, dummy);
            if (board[m-1][j] == 'O') uf.union((m-1)*n + j, dummy); 
        }
        //使用方向数组d,上下左右四个方向搜索
        int[][] d = new int[][]{{1,0},{0,1},{0,-1},{-1,0}};
        for (int i = 1; i < m - 1; i++) {
            for (int j = 1; j < n - 1; j++) {
                if (board[i][j] == 'O') {
                    for (int k = 0; k < 4; k++) {
                        int x = i + d[k][0];
                        int y = j + d[k][1];
                        if (board[x][y] == 'O') {
                            uf.union(x*n+y, i*n+j);
                        }
                    }
                }
            }
        }
        //所有不和dummy连通的O, 都要被替换(内圈的)
        for (int i = 1; i < m-1; i++) {
            for (int j = 1; j < n-1; j++) {
                if (!uf.connected(dummy, i*n + j)) {
                    board[i][j] = 'X';
                }
            }
        }
    }
    class UF {
        //连通分量的个数
        private int count;
        //存储每个节点的父节点
        private int[] parent;
        //n为图中节点的个数
        public UF(int n) {
            this.count = n;
            parent = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
            }
        }
        //将节点p和节点q连通
        public void union(int p, int q) {
            int rootP = find(p);
            int rootQ = find(q);
            if (rootP == rootQ) {
                return;
            }
            parent[rootQ] = rootP;
            //两个连通分量合并成一个
            count--;
        }
        //判断节点p和节点q是否连通
        public boolean connected(int p, int q) {
            int rootP = find(p);
            int rootQ = find(q);
            return rootP == rootQ;
        }

        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }

        //返回图中的连通分量的个数
        public int count() {
            return count;
        }
    }
}
