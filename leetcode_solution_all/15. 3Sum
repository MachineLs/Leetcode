Solution 1: 复用twoSumII的方法, 并且for循环里进行了剪枝prune(大于0之后的元素不可能相加还等于0), Time: O(n^2) and Space: O(n) or O(logn) depending on sorting algo
//先sort 
//先固定一个nums[i], 然后用twoSum2的方法, 使用左右指针查找 sum值为0的组合(sum=nums[i]+nums[left]+nums[right]), 
//sum == 0 -> res.add(..), sum < 0 left++, sum > 0 right--;
//因为不允许重复值, 注意有两个地方需要剪枝nums[i-1]和nums[i], sum==0时候nums[left-1]和nums[left]; 
//example: [-2,0,0,2,2], 不剪枝过不了这个case

class Solution {
    List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        for (int i = 0; i < nums.length && nums[i] <= 0; i++) {
            //第一个剪枝:这里判断相邻是为了减少第一个nums[i]重复问题;
            if (i == 0 || nums[i-1] != nums[i]) {
                twoSumII(nums, i);
            }
        }
        return res;
    }
    void twoSumII(int[] nums, int i) {
        //因为nums[i]是第一个数, 所以left从i+1开始,right是最后一个数, 然后left和right慢慢收缩
        int left = i + 1, right = nums.length - 1;
        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];
            if (sum == 0) {
                res.add(Arrays.asList(nums[i], nums[left++], nums[right--]));
                //第二个剪枝:是为了判断twoSum里left的查重问题
                while (left < right && nums[left - 1] == nums[left]) {
                    left++;
                }
            } else if (sum < 0) {
                left++;
            } else {
                right--;
            }
        }
    }
}

Complexity Analysis

Time Complexity: O(n^2). twoSumII is O(n), and we call it nn times.

Sorting the array O(nlogn), so overall complexity is O(nlogn+n^2). This is asymptotically equivalent to O(n^2).

Space Complexity: from O(logn) to O(n), depending on the implementation of the sorting algorithm. For the purpose of complexity analysis, we ignore the memory required for the output.


For the main function:

Sort the input array nums.
Iterate through the array:
If the current value is greater than zero, break from the loop. Remaining values cannot sum to zero.
If the current value is the same as the one before, skip it.
Otherwise, call twoSumII for the current position i.

For twoSumII function:
Set the low pointer lo to i + 1, and high pointer hi to the last index.
While low pointer is smaller than high:
If sum of nums[i] + nums[lo] + nums[hi] is less than zero, increment lo.
If sum is greater than zero, decrement hi.
Otherwise, we found a triplet:
Add it to the result res.
Decrement hi and increment lo.
Increment lo while the next value is the same as before to avoid duplicates in the result.
