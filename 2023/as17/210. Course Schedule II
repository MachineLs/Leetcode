//ref https://labuladong.github.io/algo/di-yi-zhan-da78c/shou-ba-sh-03a72/huan-jian--e36de/
class Solution {
    List<Integer> postOrder = new ArrayList<>();
    boolean[] onPath, visited;
    boolean hasCycle; 
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        visited = new boolean[numCourses];
        onPath = new boolean[numCourses];
        //build graph
        List<Integer>[] graph = buildGraph(numCourses, prerequisites);
        for (int i = 0; i < numCourses; i++) {
            traverse(graph, i);
        }
        if (hasCycle) return new int[]{};
        Collections.reverse(postOrder);
        int[] res = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            res[i] = postOrder.get(i);
        }
        return res;
    }

    List<Integer>[] buildGraph(int numCourses, int[][] prerequisites) {
        /* 我错在new LinkedList<Integer>(); */ 
        List<Integer>[] graph = new LinkedList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new LinkedList<>();
        }
        for (int[] edge : prerequisites) {
            int from = edge[1];
            int to = edge[0];
            graph[from].add(to);
        }
        return graph;
    }

    void traverse(List<Integer>[] graph, int s) {
        /* 这里整个逻辑都错了 if (hasCycle) return; */ 
        if (onPath[s]) {
            //发现环
            hasCycle = true;
        }
        /*我错在onPath[s],应该是visited[s]*/ 
        if (visited[s] || hasCycle) {
            return;
        }

        //前序
        onPath[s] = true;
        visited[s] = true;
        for (int t : graph[s]) {
            traverse(graph, t);
        }

        //后序
        postOrder.add(s);
        onPath[s] = false;
    }
}
