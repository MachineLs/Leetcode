// follow up : 要求我们用时O(nlogn) ，也就是说我们只需要维护大小为K的堆，因此，我们应该采用“最小堆”而非“最大堆”，堆顶元素是当前出现次数最小的，所以当下一次有新元素加进来的时候，如果堆的大小超过了k，就可以把堆顶这个出现次数最少的元素弹掉了，这样一来，最后堆中剩下的k个元素都是出现次数最多得了，是不是很神奇~！！！！

// 所以这道题我们的堆应该是这样的：

// 出现次数少的优先出堆
// 出现次数一样的，字典序大的优先出队
// 堆的大小为k,当堆中元素个数超过k时，手动poll出堆

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int n : nums) {
            map.put(n, map.getOrDefault(0, n) + 1); // 
        }
        PriorityQueue<Integer> heap = new PriorityQueue<Integer> ((a , b) -> map.get(b) - map.get(a));
        //维护一个k的minheap
        for (int key : map.keySet()) {
            heap.add(key);
            if (heap.size() > k) heap.poll();
        }
        System.out.println(map.keySet());
        System.out.println(heap);
        int[] res = new int[k];
        for (int i = k-1; i >= 0; i--) {
            res[i] = heap.poll();
        }
        return res;
    }
    
    //O(nlogk) and O(n+k)
}
