ref: https://labuladong.github.io/algo/di-yi-zhan-da78c/shou-ba-sh-03a72/bing-cha-j-323f3/
class Solution {
    public int countComponents(int n, int[][] edges) {
        UF uf = new UF(n);
        //将每个节点进行连通
        for (int[] e : edges) {
            uf.union(e[0], e[1]);
        }
        //返回连通分量个数
        return uf.count();
    }
    class UF {
        //连通分量
        int count;
        //储存每个节点的父节点
        int[] parent;
        //n为图中节点的个数
        public UF(int n) {
            this.count = n;
            parent = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
            }
        }
        //将节点p和节点q连通
        public void union(int p, int q) {
            int rootP = find(p);
            int rootQ = find(q);
            if (rootP == rootQ) return;
            parent[rootQ] = rootQ;
            //合并两个连通分量
            count--;
        }
        //判断节点pq是否连通
        public boolean connected(int p, int q) {
            int rootP = find(p);
            int rootQ = find(q);
            return rootP == rootQ;
        }
        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }
        public int count() {
            return count;
        }
    }
}
