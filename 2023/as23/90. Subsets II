//避免nums[i] == nums[i-1]在递归树遍历的情况, 记录每一层的元素即可\
// ref: https://labuladong.github.io/algo/di-san-zha-24031/bao-li-sou-96f79/hui-su-sua-56e11/
class Solution {
    List<List<Integer>> res = new LinkedList<>();
    LinkedList<Integer> track = new LinkedList<>();
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        backtrack(nums, 0);
        return res;
    }
    void backtrack(int[] nums, int start) {
        /*我错在, 我们要的不是递归树最底层的元素集合 */ 
        // if (track.size() == nums.length) {
        //     res.add(new LinkedList(track));
        //     return;
        // }
        //而是在递归过程中就把元素加进来
        res.add(new LinkedList<>(track));
        for (int i = start; i < nums.length; i++) {
            /*我错在 i+1 < nums.length*/
            // 剪枝逻辑，值相同的相邻树枝，只遍历第一条
            if (i > start && nums[i] == nums[i-1]) continue;
            track.add(nums[i]);
            backtrack(nums, i+1);
            track.removeLast();
        }
    }
}
