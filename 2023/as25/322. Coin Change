ref: https://labuladong.github.io/algo/di-er-zhan-a01c6/dong-tai-g-a223e/dong-tai-g-1e688/
递归
class Solution {
    int[] memo;
    public int coinChange(int[] coins, int amount) {
        memo = new int[amount+1];
        Arrays.fill(memo, -666);
        return dp(coins, amount);
    }
    public int dp(int[] coins, int amount) {
        if (amount == 0) return 0;
        if (amount < 0) return -1;

        if (memo[amount] != -666) return memo[amount];
        int res = Integer.MAX_VALUE;
        for (int coin : coins) {
            int subProblem = dp(coins, amount - coin);
            if (subProblem == -1) continue;
            res = Math.min(res, subProblem + 1);
        }
        memo[amount] = res == Integer.MAX_VALUE ? -1 : res;
        return memo[amount];
    }
}
递归转DP
class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] M = new int[amount+1];
        Arrays.fill(M, amount+1);
        //base case
        M[0] = 0;
        //外层for循环在遍历所有状态的所有取值
        for (int i = 0; i < M.length; i++) {
            //内层for循环在求所有选择的最小值
            for (int coin : coins) {
                //子问题无解跳过
                if (i - coin < 0) {
                    continue;
                }
                M[i] = Math.min(M[i], M[i-coin] + 1);
            }
        }
        return (M[amount] == amount+1) ? -1 : M[amount];
    }
}
