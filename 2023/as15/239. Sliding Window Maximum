// ref: https://labuladong.github.io/algo/di-yi-zhan-da78c/shou-ba-sh-daeca/dan-diao-d-32cd5/
//使用单调队列, 左侧队头,右侧队尾, 让单调队列的左侧队头始终是max值, 右侧是最小值,
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        MonotonicQueue window = new MonotonicQueue();
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (i < k - 1) {
                window.push(nums[i]);
            } else {
                window.push(nums[i]);
                res.add(window.max());
                window.pop(nums[i - (k - 1)]);
            }
        }
        //ArrayList to int[] https://stackoverflow.com/questions/718554/how-to-convert-an-arraylist-containing-integers-to-primitive-int-array
        int[] arr = res.stream().mapToInt(i -> i).toArray(); 
        return arr;
    }

    class MonotonicQueue {
        LinkedList<Integer> maxq = new LinkedList<>();
        public void push(int n) {
            //将小于n的元素全部删除(压扁前面比n小的)
            while (!maxq.isEmpty() && maxq.getLast() < n) {
                maxq.pollLast();
            }
            //将n加入尾部
            maxq.addLast(n);
        }
        
        public int max() {
            return maxq.getFirst();
        }

        public void pop(int n) {
            if (n == maxq.getFirst()) { //这里需要判断因为, 可能压扁后n已经是最小的了,所以这时候就不用删除了
                maxq.pollFirst();
            }
        }
    }
}
