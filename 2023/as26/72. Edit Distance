//本题s1的元素不等s2的元素的情况下有有三种操作, 插入, 删除, 替换, 分别对ij进行对应的向前移动操作
//在相等的情况下,ij同时向前即可
//在利用dp查表的思想进行递归
class Solution {
    int[][] memo;
    public int minDistance(String s1, String s2) {
        int m = s1.length(), n = s2.length();
        //memo初始化
        memo = new int[m][n];
        for (int[] row : memo) {
            Arrays.fill(row, -1);
        }
        return dp(s1, m-1, s2, n-1);
    }

    int dp(String s1, int i, String s2, int j) {
        if (j == -1) return i+1;
        if (i == -1) return j+1;
        //查表
        if (memo[i][j] != -1) {
            return memo[i][j];
        }
        //状态转移,结果存入备忘录
        if (s1.charAt(i) == s2.charAt(j)) {
            return dp(s1, i-1, s2, j-1);
        } else {
            memo[i][j] = min(
                //插入:j-1,在比较即可
                dp(s1, i, s2, j-1) + 1,
                //删除:i-1,前移i,在比较即可
                dp(s1, i-1, s2, j) + 1,
                //替换
                //直接用s2[j]替换掉s1[i], 同时前移ij继续对比
                dp(s1, i-1, s2, j-1) + 1
            );
        }
        return memo[i][j];
    }
    int min(int a, int b, int c) {
        return Math.min(a, Math.min(b, c));
    }
}
