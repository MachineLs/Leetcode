//ref: https://labuladong.github.io/algo/di-yi-zhan-da78c/shou-ba-sh-03a72/er-fen-tu--73400/
//每个人是图中的节点, 相互讨厌的关系看成图的边, 那么dislikes数组就是一个图
//然后用染色问题做(需要用模板把int[][] dislikes 转换成邻接表List<Integer>[] graph)
class Solution {
    boolean ok = true;
    boolean[] color;
    boolean[] visited;
    public boolean possibleBipartition(int n, int[][] dislikes) {
        //从1开始,所以长度是n+1;
        color = new boolean[n+1];
        visited = new boolean[n+1];
        //转化成邻接表(adjacency list)图结构
        List<Integer>[] graph = buildGraph(n, dislikes);

        for (int v = 1; v <= n; v++) {
            if (!visited[v]) {
                traverse(graph, v);
            }
        }
        return ok;
    }

    //int[][] 转 adjacency list
    List<Integer>[] buildGraph(int n, int[][] dislikes) {
        List<Integer>[] graph = new LinkedList[n + 1];
        for (int i = 1; i <= n; i++) {
            graph[i] = new LinkedList<>();
        }
        for (int[] edge : dislikes) {
            int v = edge[1];
            int w = edge[0];
            //无向图=双向图
            //v - >
            graph[v].add(w);
            graph[w].add(v);
        }
        return graph;
    }

    void traverse(List<Integer>[] graph, int v) {
        if (!ok) return;
        visited[v] = true;
        for (int w : graph[v]) {
            if (!visited[w]) {
                color[w] = !color[v];
                traverse(graph, w);
            } else {
                if (color[w] == color[v]) {
                    ok = false;
                    return;
                }
            }
        }
    }
    
}
